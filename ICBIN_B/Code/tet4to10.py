import os
import pyvista as pv
import numpy as np

def read_stl(stl_file):
    """
    Read the STL file using PyVista and return the mesh points and faces.
    """
    mesh = pv.read(stl_file)
    points = mesh.points  # Points in 3D space
    faces = mesh.faces  # Faces of the mesh (triangular facets)
    
    # Faces are in the form of [num_faces, p0, p1, p2], reshape to extract only the vertices
    faces = faces.reshape(-1, 4)[:, 1:]
    return points, faces

def find_neighbors(faces):
    """
    Find the neighbors for each triangle face based on shared edges.
    This will help in identifying the fourth vertex of each tetrahedron.
    """
    edges = {}
    # Create a dictionary to store edges
    for i, face in enumerate(faces):
        for j in range(3):
            edge = tuple(sorted([face[j], face[(j + 1) % 3]]))  # Sort so that the order of vertices doesn't matter
            if edge not in edges:
                edges[edge] = []
            edges[edge].append(i)
    
    # Find neighbors for each face based on shared edges
    neighbors = {}
    for edge, faces_list in edges.items():
        if len(faces_list) == 2:  # A valid neighboring edge
            neighbors[faces_list[0]] = faces_list[1]
            neighbors[faces_list[1]] = faces_list[0]
    
    return neighbors

def extract_tetrahedra_from_faces(points, faces, neighbors):
    """
    Extract tetrahedra from the faces based on shared edges (neighbors).
    For each face, we find the fourth point from the neighboring face.
    """
    tetrahedra = []
    
    # Loop through each face and identify the fourth point
    for i, face in enumerate(faces):
        # Get the neighboring face
        if i not in neighbors:
            continue  # Skip if there are no neighbors (isolated triangle)
        
        neighbor_face_idx = neighbors[i]
        neighbor_face = faces[neighbor_face_idx]
        
        # Find the common edge between the two faces (they should share two edges)
        shared_edges = set([tuple(sorted([face[j], face[(j + 1) % 3]])) for j in range(3)]) & \
                        set([tuple(sorted([neighbor_face[j], neighbor_face[(j + 1) % 3]])) for j in range(3)])
        
        # Find the fourth point (not shared by the two faces)
        common_points = set(face) & set(neighbor_face)
        if len(common_points) == 2:
            # The 4th point is the remaining point from each face
            fourth_point = list(set(face) | set(neighbor_face) - common_points)[0]
            tetrahedra.append([face[0], face[1], face[2], fourth_point])
    
    return tetrahedra

def save_mesh(refined_points, tetrahedra, output_file):
    """
    Save refined mesh (nodes and elements) to an Abaqus .inp file.
    """
    with open(output_file, 'w') as f_inp:
        f_inp.write("** file generated by ICBIN_B/code/tet4to10.py \n")
        
        # Write the nodes section
        f_inp.write("*Node\n")
        for i, node in enumerate(refined_points):
            node_id = i + 1
            f_inp.write(f"{node_id}, {node[0]:.6e}, {node[1]:.6e}, {node[2]:.6e}\n")
        
        # Write the elements section (tetrahedral elements)
        f_inp.write("*Element, type=C3D4\n")  # C3D4 corresponds to 4-node tetrahedral elements
        for i, elem in enumerate(tetrahedra):
            element_id = i + 1
            f_inp.write(f"{element_id}, " + ", ".join(map(str, [x + 1 for x in elem])) + "\n")

def process_and_save_files(source_folder, destination_folder):
    """
    Process all STL files in the source folder, generate tetrahedral meshes, and save them in the destination folder.
    """
    if not os.path.exists(destination_folder):
        os.makedirs(destination_folder)

    stl_files = [f for f in os.listdir(source_folder) if f.endswith('.stl')]

    for stl_file in stl_files:
        stl_file_path = os.path.join(source_folder, stl_file)
        
        # Read the STL file and extract points and faces
        points, faces = read_stl(stl_file_path)
        
        # Find neighbors (shared edges between faces)
        neighbors = find_neighbors(faces)
        
        # Extract tetrahedra from faces (using already existing points)
        tetrahedra = extract_tetrahedra_from_faces(points, faces, neighbors)
        
        # Define output file for Abaqus .inp file
        output_file = os.path.join(destination_folder, f"{os.path.splitext(stl_file)[0]}.inp")
        
        # Save the refined mesh in Abaqus .inp format
        save_mesh(points, tetrahedra, output_file)


# Main Execution
source_folder = r"Z:\_PROJECTS\Deep_Learning_HRpQCT\ICBIN_B\Data\Generated\tet4"
destination_folder = r"Z:\_PROJECTS\Deep_Learning_HRpQCT\ICBIN_B\Data\Generated\tet10"

process_and_save_files(source_folder, destination_folder)
